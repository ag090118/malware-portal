import React, { useEffect, useState } from "react";
import Header from "./Header";
import Header2 from "./Header2";
import Main from "./Main";
import News from "./News";
import "../styles.css";
import { useSelector } from "react-redux";
import { useCookies } from "react-cookie";
import { useNavigate } from "react-router-dom";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import Modal from "@mui/material/Modal";
import { IoSend } from "react-icons/io5";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";
import TextField from "@mui/material/TextField";
import parse from "html-react-parser";
import Tagchips from "./Tagchips";
import { IoCloseSharp } from "react-icons/io5";
import ToggleButton from "@mui/material/ToggleButton";
import ToggleButtonGroup from "@mui/material/ToggleButtonGroup";

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: "40vw",
  height: "80vh",
  bgcolor: "background.paper",
  border: "2px solid #000",
  boxShadow: 24,
  p: 4,
};

function Home() {
  const name = useSelector((state) => state.checkUserLogin.userName);
  const [alignment, setAlignment] = React.useState("web");
  const [open, setOpen] = React.useState(false);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const [convertedText, setConvertedText] = useState("");
  const [cookies, setCookie] = useCookies();
  const navigate = useNavigate();
  const checkRender = async () => {
    if (!cookies.jwtoken) {
      navigate("/login");
    }
  };
  useEffect(() => {
    checkRender();
  }, []);

  const handleChange = (event, newAlignment) => {
    setAlignment(newAlignment);
  };

  return (
    <div className="App">
    {console.log(convertedText)}
      {console.log(convertedText)}
      <div className="postform-wrapper">
        <Modal
          keepMounted
          open={open}
          onClose={handleClose}
          aria-labelledby="keep-mounted-modal-title"
          aria-describedby="keep-mounted-modal-description"
        >
          <Box sx={style}>
            <ToggleButtonGroup
              color="primary"
              value={alignment}
              exclusive
              onChange={handleChange}
            >
              <ToggleButton value="question">Collaborative</ToggleButton>
              <ToggleButton value="post">Non-collaborative</ToggleButton>
            </ToggleButtonGroup>
            <div className="close-postform">
              <Button variant="contained" onClick={handleClose}>
                <IoCloseSharp />
              </Button>
            </div>
            <div className="postform-title">
              <TextField
                id="outlined-basic"
                label="Title"
                variant="outlined"
                name="userName"
                fullWidth={true}
                sx={{
                  "& label.Mui-focused": {
                    color: "black",
                  },
                  "& .MuiInput-underline:after": {
                    borderBottomColor: "black",
                  },
                  "& .MuiOutlinedInput-root": {
                    "& fieldset": {
                      borderColor: "#BCBCBC",
                    },
                    "&:hover fieldset": {
                      borderColor: "black",
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: "black",
                    },
                  },
                }}
              />
            </div>
            <div className="postform-data">
              <ReactQuill
                modules={{
                  toolbar: [
                    [{ header: "1" }, { header: "2" }, { font: [] }],
                    [{ size: [] }],
                    ["bold", "italic", "underline", "strike", "blockquote"],
                    [
                      { list: "ordered" },
                      { list: "bullet" },
                      { indent: "-1" },
                      { indent: "+1" },
                    ],
                    ["link", "image", "video"],
                    ["clean"],
                  ],
                  clipboard: {
                    matchVisual: false,
                  },
                }}
                theme="snow"
                value={convertedText}
                onChange={setConvertedText}
                style={{ minHeight: "60px" }}
              />
            </div>

            {/* <Data convertedText={convertedText} /> */}

            <Tagchips />

            <div className="postform-postbutton">
              <Button size="large" endIcon={<IoSend />} variant="contained">
                POST
              </Button>
            </div>
          </Box>
        </Modal>
      </div>
      <div className="header">
        <Header handleOpen={handleOpen} />
      </div>
      <h1>{cookies.username}</h1>
      <div className="center">
        <div className="main">
          <Main />
        </div>
        <div className="side">
          <News />
        </div>
      </div>
    </div>
  );
}
export default Home;
